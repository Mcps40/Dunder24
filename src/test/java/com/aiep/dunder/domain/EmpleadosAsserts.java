package com.aiep.dunder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmpleadosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadosAllPropertiesEquals(Empleados expected, Empleados actual) {
        assertEmpleadosAutoGeneratedPropertiesEquals(expected, actual);
        assertEmpleadosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadosAllUpdatablePropertiesEquals(Empleados expected, Empleados actual) {
        assertEmpleadosUpdatableFieldsEquals(expected, actual);
        assertEmpleadosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadosAutoGeneratedPropertiesEquals(Empleados expected, Empleados actual) {
        assertThat(expected)
            .as("Verify Empleados auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadosUpdatableFieldsEquals(Empleados expected, Empleados actual) {
        assertThat(expected)
            .as("Verify Empleados relevant properties")
            .satisfies(e -> assertThat(e.getNombre_empleado()).as("check nombre_empleado").isEqualTo(actual.getNombre_empleado()))
            .satisfies(e -> assertThat(e.getApellido_empleado()).as("check apellido_empleado").isEqualTo(actual.getApellido_empleado()))
            .satisfies(e -> assertThat(e.getTelefono_empleado()).as("check telefono_empleado").isEqualTo(actual.getTelefono_empleado()))
            .satisfies(e -> assertThat(e.getCorreo_empleado()).as("check correo_empleado").isEqualTo(actual.getCorreo_empleado()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadosUpdatableRelationshipsEquals(Empleados expected, Empleados actual) {
        assertThat(expected)
            .as("Verify Empleados relationships")
            .satisfies(e -> assertThat(e.getDepartamento()).as("check departamento").isEqualTo(actual.getDepartamento()))
            .satisfies(e -> assertThat(e.getJefatura()).as("check jefatura").isEqualTo(actual.getJefatura()));
    }
}
